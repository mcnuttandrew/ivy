{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "DataTargetWidget": {
      "additionalProperties": {},
      "properties": {
        "allowedTypes": {
          "items": {
            "enum": [
              "DIMENSION",
              "MEASURE",
              "TIME"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "required": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "DataType": {
      "enum": [
        "DIMENSION",
        "MEASURE",
        "TIME"
      ],
      "type": "string"
    },
    "ListWidget": {
      "additionalProperties": {},
      "properties": {
        "allowedValues": {
          "items": {
            "properties": {
              "display": {
                "type": "string"
              },
              "value": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "defaultValue": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "MultiDataTargetWidget": {
      "additionalProperties": {},
      "properties": {
        "allowedTypes": {
          "items": {
            "enum": [
              "DIMENSION",
              "MEASURE",
              "TIME"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "maxNumberOfTargets": {
          "type": "number"
        },
        "minNumberOfTargets": {
          "type": "number"
        },
        "required": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "SectionWidget": {
      "additionalProperties": {},
      "properties": {
        "text": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Shortcut": {
      "properties": {
        "label": {
          "type": "string"
        },
        "shortcutFunction": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ShortcutsWidget": {
      "properties": {
        "shortcuts": {
          "items": {
            "$ref": "#/definitions/Shortcut"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "SliderWidget": {
      "additionalProperties": {},
      "properties": {
        "defaultValue": {
          "type": "number"
        },
        "maxVal": {
          "type": "number"
        },
        "minVal": {
          "type": "number"
        },
        "step": {
          "type": "number"
        }
      },
      "type": "object"
    },
    "SwitchWidget": {
      "additionalProperties": {},
      "properties": {
        "activeValue": {
          "type": "string"
        },
        "defaultsToActive": {
          "type": "boolean"
        },
        "inactiveValue": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "T": {
      "type": "object"
    },
    "Template": {
      "description": "The main configuration object for templates",
      "properties": {
        "code": {
          "description": "The code to be interpreted by the renderer",
          "type": "string"
        },
        "templateAuthor": {
          "description": "The creator of the template",
          "type": "string"
        },
        "templateDescription": {
          "description": "The description that users will see in the chart chooser gallery",
          "type": "string"
        },
        "templateLanguage": {
          "description": "The language of the code, determines how the code will be interpreted.\nHydra currently supports vega, vega-lite, and it's own data table system\n\n  __Default value:__ `vega-lite`",
          "type": "string"
        },
        "templateName": {
          "description": "The name of the template. Template names must be unique, so this can over-ride other extant templates",
          "type": "string"
        },
        "widgetValidations": {
          "description": "Sometimes you want to decative certain values depending on the state of the UI\nThis advanced features allows you to do that",
          "items": {
            "$ref": "#/definitions/WidgetValidation"
          },
          "type": "array"
        },
        "widgets": {
          "description": "The mechanism by which users interact with your template",
          "items": {
            "$ref": "#/definitions/Widget<WidgetSubType>"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "TemplateMap": {
      "additionalProperties": {
        "anyOf": [
          {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          {
            "type": "string"
          }
        ]
      },
      "type": "object"
    },
    "Widget": {
      "additionalProperties": {},
      "properties": {
        "displayName": {
          "description": "The name to be shown in the GUI, does not have to be unique.",
          "type": "string"
        },
        "widget": {
          "$ref": "#/definitions/T"
        },
        "widgetName": {
          "description": "The name of widget to be used, this name will be swapped into the code string, must be unqiue",
          "type": "string"
        },
        "widgetType": {
          "$ref": "#/definitions/WidgetType",
          "description": "The type of the widget to be used, this defined the specific gui item that the user interacts with"
        }
      },
      "type": "object"
    },
    "Widget<WidgetSubType>": {
      "additionalProperties": {},
      "properties": {
        "displayName": {
          "description": "The name to be shown in the GUI, does not have to be unique.",
          "type": "string"
        },
        "widget": {
          "anyOf": [
            {
              "$ref": "#/definitions/DataTargetWidget"
            },
            {
              "$ref": "#/definitions/MultiDataTargetWidget"
            },
            {
              "$ref": "#/definitions/ListWidget"
            },
            {
              "$ref": "#/definitions/SwitchWidget"
            },
            {
              "$ref": "#/definitions/TextWidget"
            },
            {
              "$ref": "#/definitions/SectionWidget"
            },
            {
              "$ref": "#/definitions/SliderWidget"
            },
            {
              "$ref": "#/definitions/ShortcutsWidget"
            }
          ]
        },
        "widgetName": {
          "description": "The name of widget to be used, this name will be swapped into the code string, must be unqiue",
          "type": "string"
        },
        "widgetType": {
          "$ref": "#/definitions/WidgetType",
          "description": "The type of the widget to be used, this defined the specific gui item that the user interacts with"
        }
      },
      "type": "object"
    },
    "TextWidget": {
      "additionalProperties": {},
      "properties": {
        "text": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "WidgetSubType": {
      "anyOf": [
        {
          "$ref": "#/definitions/DataTargetWidget"
        },
        {
          "$ref": "#/definitions/MultiDataTargetWidget"
        },
        {
          "$ref": "#/definitions/ListWidget"
        },
        {
          "$ref": "#/definitions/SwitchWidget"
        },
        {
          "$ref": "#/definitions/TextWidget"
        },
        {
          "$ref": "#/definitions/SectionWidget"
        },
        {
          "$ref": "#/definitions/SliderWidget"
        },
        {
          "$ref": "#/definitions/ShortcutsWidget"
        }
      ]
    },
    "WidgetType": {
      "enum": [
        "DataTarget",
        "List",
        "MultiDataTarget",
        "Section",
        "Shortcut",
        "Slider",
        "Switch",
        "Text"
      ],
      "type": "string"
    },
    "WidgetValidation": {
      "properties": {
        "query": {
          "description": "A widget validation query, executed raw javascript. Parameter values (the value of the current ui)\nis accessed through parameters.VALUE. E.g. if you wanted to construct a predicate that check if\nthere wasn't a current value for the x dimension called xDim you could do \"!parameters.xDim\"",
          "type": "string"
        },
        "queryResult": {
          "description": "What to do in response to the result of the query",
          "enum": [
            "hide",
            "show"
          ],
          "type": "string"
        },
        "queryTarget": {
          "description": "The name of the variable being targeted",
          "type": "string"
        }
      },
      "type": "object"
    },
    "WidgetValidationQuery": {
      "description": "A widget validation query, executed raw javascript. Parameter values (the value of the current ui)\nis accessed through parameters.VALUE. E.g. if you wanted to construct a predicate that check if\nthere wasn't a current value for the x dimension called xDim you could do \"!parameters.xDim\"",
      "type": "string"
    }
  },
  "$ref": "#/definitions/Template"
}