<script>
    const renderObjectIf = (object, checkKey, fieldName) => (parameters[checkKey] ? { [fieldName]: object } : {});
    // const usingMetaColumn = ['X', 'Y', 'Size', 'Color', 'Shape', 'Detail'].some(key => {
    //     return typeof parameters[key] === 'object';
    // })

    const encoding = {
        x: {
            field: parameters.X,
            type: parameters.XType,
            scale: { zero: parameters.XIncludeZero } 
        },
        y: {
            field: parameters.Y,
            type: parameters.YType,
            scale: { zero: parameters.YIncludeZero } 
        },
        ...renderObjectIf({
            field: parameters.Size,
            type: parameters.SizeType,
        }, 'Size', 'size'),
        ...renderObjectIf({
            field: parameters.Color,
            type: parameters.ColorType,
        }, 'Color', 'color'),
        ...renderObjectIf({
            field: parameters.Shape,
            type: parameters.ShapeType,
        }, 'Shape', 'shape'),
        ...renderObjectIf({
            field: parameters.Text,
            type: parameters.TextType,
        }, 'Text', 'text'),
        ...renderObjectIf({
            field: parameters.Detail,
            type: parameters.DetailType,
        }, 'Detail', 'detail'),
        ...['Row', 'Column'].reduce((acc, key) => {
            const newObj = renderObjectIf({
                field: parameters[key],
                type: 'nominal'
            }, key, key.toLowerCase());
            return { ...acc, ...newObj };
        }, {})  
    }
</script>
<output>
{
    $schema: 'https:vega.github.io/schema/vega-lite/v4.json',
    transform: [],
    encoding,
    mark: {type: parameters.markType, tooltip: true}
};
</output>